"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from common.configs.config import config as cfg
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from django.test.runner import DiscoverRunner
import BaseWorke
from BaseWorke.database.db_routers import DefaultRouter
from BaseWorke.middlewares.new_relic_middleware import NewRelicMiddleware
from BaseWorke.middlewares.constant import JWT_SECRET
from BaseWorke.middlewares.jwt_middleware import JWTMiddleware
from BaseWorke.authentication import IsAuthenticatedOverride

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# import dotenv
# from pathlib import Path

# dotenv_path = Path("/home/ubuntu/.env")
# dotenv.load_dotenv(dotenv_path=dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-vq=kj4r(%$!wnq+pbg&2ocki28d9+yfugb08crk^+n(_d$9l-k"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(cfg.get("common", "DEBUG", fallback=False))

ALLOWED_HOSTS = [
    "localhost",
    "0.0.0.0",
    "127.0.0.1",
    "192.168.0.112",
    "10.0.1.140",
    "services.worke.io",
    "staging.worke.io",
    "stageservices.worke.io",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "calendars",
    "rest_framework",
    "silk",
    "corsheaders",
    "drf_yasg",
    "django_prometheus",
]


# Sentry definition

sentry_sdk.init(
    dsn=cfg.get("sentry", "DNS"),
    # debug=DEBUG,
    integrations=[DjangoIntegration()],
    traces_sample_rate=float(cfg.get("sentry", "SAMPLE_RATE")),
    send_default_pii=True,
)

# CORS_ALLOWED_ORIGINS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "BaseWorke.middlewares.new_relic_middleware.NewRelicMiddleware",
    "silk.middleware.SilkyMiddleware",
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

MIDDLEWARE_CLASSES = [JWTMiddleware]

ROOT_URLCONF = "src.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "src.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": cfg.get("postgres", "DB_NAME"),
        "OPTIONS": {"options": "-c search_path=" + cfg.get("postgres", "DB_SCHEMA")},
        "USER": cfg.get("postgres", "DB_USER"),
        "PASSWORD": cfg.get("postgres", "DB_PASSWORD"),
        "HOST": cfg.get("postgres", "DB_HOST"),
        "PORT": cfg.get("postgres", "DB_PORT"),
    }
}
# "PASSWORD": cfg.get("postgres", "DB_PASSWORD"),
DATABASE_ROUTERS = [
    "common.database.db_routers.DefaultRouter",
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
# STATIC_URL = "static/"
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, "static")
STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redis cashs
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "OPTIONS": {
            "db": "10",
            "parser_class": "redis.connection.PythonParser",
            "pool_class": "redis.BlockingConnectionPool",
        },
    }
}

# JWT Settings

SIMPLE_JWT = {
    "SIGNING_KEY": JWT_SECRET,
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("BaseWorke.authentication.IsAuthenticatedOverride",),
}

# Swagger Settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": cfg.get("swagger", "API_KEY"),
            "name": cfg.get("swagger", "AUTHORIZATION"),
            "in": cfg.get("swagger", "HEADER"),
        },
    }
}


class DbTestRunner(DiscoverRunner):
    """A test runner to test without database creation."""

    def setup_databases(self, **kwargs):
        """Override the database creation defined in parent class."""
        pass

    def teardown_databases(self, old_config, **kwargs):
        """Override the database teardown defined in parent class."""
        pass


TEST_RUNNER = "src.settings.DbTestRunner"
